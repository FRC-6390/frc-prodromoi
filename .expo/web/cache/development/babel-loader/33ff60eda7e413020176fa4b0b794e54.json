{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar timepressed = 0;\nvar Stack = createNativeStackNavigator();\nvar navitgatorScreen = function navitgatorScreen(navigation) {\n  return _jsx(\"view\", {\n    style: styles.container,\n    children: _jsx(Pressable, {\n      style: styles.button,\n      onPress: function onPress() {\n        return navigation.navigate('Details');\n      },\n      children: _jsx(Text, {\n        style: styles.text,\n        children: \"Matches\"\n      })\n    })\n  });\n};\nvar Button1 = function Button1() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    timesPressed = _useState2[0],\n    setTimesPressed = _useState2[1];\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Pressable, {\n      onPress: function onPress() {\n        setTimesPressed(function (current) {\n          return current + 1;\n        });\n        timepressed = timepressed + 1;\n      },\n      style: function style(_ref) {\n        var pressed = _ref.pressed;\n        return [{\n          backgroundColor: pressed ? 'rgb(10, 100, 25)' : 'white'\n        }, styles.wrapperCustom];\n      },\n      children: function children(_ref2) {\n        var pressed = _ref2.pressed;\n        return _jsx(Text, {\n          style: styles.text,\n          children: pressed ? 'was pressed!' : 'Press Me'\n        });\n      }\n    }), _jsx(View, {\n      style: styles.logBox,\n      children: _jsxs(Text, {\n        children: [\"This is pressed \", timepressed]\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  text: {\n    fontSize: 16\n  },\n  wrapperCustom: {\n    borderRadius: 8,\n    padding: 6\n  },\n  logBox: {\n    padding: 20,\n    margin: 10,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    paddingVertical: 30,\n    paddingHorizontal: 50,\n    margin: 4,\n    borderRadius: 4,\n    elevation: 3,\n    backgroundColor: 'red'\n  }\n});\nexport default function Buttons() {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"nav\",\n      children: [_jsx(Stack.Screen, {\n        name: \"nav\",\n        componet: navitgatorScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Details\",\n        component: Button1\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","NavigationContainer","createNativeStackNavigator","timepressed","Stack","navitgatorScreen","navigation","styles","container","button","navigate","text","Button1","timesPressed","setTimesPressed","current","pressed","backgroundColor","wrapperCustom","logBox","StyleSheet","create","flex","justifyContent","fontSize","borderRadius","padding","margin","borderWidth","hairlineWidth","borderColor","alignItems","flexDirection","paddingVertical","paddingHorizontal","elevation","Buttons"],"sources":["C:/Users/Lance/OneDrive/Documents/GitHub/frc-prodromoi/Screens/Matches/Buttons.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\r\nimport {NavigationContainer} from '@react-navigation/native';\r\nimport {createNativeStackNavigator} from '@react-navigation/native-stack';\r\nimport { ScreenStack } from 'react-native-screens';\r\n\r\nvar timepressed = 0;\r\nconst Stack = createNativeStackNavigator();\r\n\r\nconst navitgatorScreen = (navigation) => {\r\nreturn(\r\n  <view style={styles.container}>\r\n<Pressable style={styles.button}   onPress={() => navigation.navigate('Details')}>\r\n<Text style={styles.text}>{\"Matches\"}</Text>\r\n</Pressable>\r\n\r\n\r\n  </view>\r\n\r\n);\r\n}\r\n\r\nconst Button1 = () => {\r\n const [timesPressed, setTimesPressed] = useState(0);//Don't delete.\r\n\r\n  return (\r\n   \r\n\r\n\r\n    <View style={styles.container}>\r\n\r\n    \r\n      <Pressable\r\n        onPress={() => {\r\n          setTimesPressed(current => current + 1);//Don't delete. The counting system stops working if this line isn't here\r\n          timepressed=timepressed + 1;\r\n        }}\r\n        style={({pressed}) => [\r\n          {\r\n            backgroundColor: pressed ? 'rgb(10, 100, 25)' : 'white',\r\n          },\r\n          styles.wrapperCustom,\r\n        ]}>\r\n        {({pressed}) => (\r\n          <Text style={styles.text}>{pressed ? 'was pressed!' : 'Press Me'}</Text>\r\n        )}\r\n      </Pressable>\r\n      <View style={styles.logBox}>\r\n        <Text>This is pressed {timepressed}</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n/*\r\nfunction timeKeeper(T){\r\nreturn(\r\nT = T + 1\r\n);\r\n};\r\n*/\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n  },\r\n  text: {\r\n    fontSize: 16,\r\n  },\r\n  wrapperCustom: {\r\n    borderRadius: 8,\r\n    padding: 6,\r\n  },\r\n  logBox: {\r\n    padding: 20,\r\n    margin: 10,\r\n    borderWidth: StyleSheet.hairlineWidth,\r\n    borderColor: '#f0f0f0',\r\n    backgroundColor: '#f9f9f9',\r\n  },\r\n  button: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'row',\r\n    paddingVertical: 30,\r\n    paddingHorizontal: 50,\r\n    margin: 4,\r\n    borderRadius: 4,\r\n    elevation: 3,\r\n    backgroundColor: 'red',\r\n  },\r\n});\r\n\r\nexport default function Buttons() { \r\n  return( \r\n<NavigationContainer>\r\n<Stack.Navigator initialRouteName=\"nav\">\r\n  <Stack.Screen name=\"nav\" componet={navitgatorScreen}/>\r\n  <Stack.Screen name=\"Details\" component={Button1} />\r\n</Stack.Navigator>\r\n</NavigationContainer>\r\n);\r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC;AAAA;AAAA;AAAA;AAEtC,SAAQC,mBAAmB,QAAO,0BAA0B;AAC5D,SAAQC,0BAA0B,QAAO,gCAAgC;AAAC;AAAA;AAG1E,IAAIC,WAAW,GAAG,CAAC;AACnB,IAAMC,KAAK,GAAGF,0BAA0B,EAAE;AAE1C,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,UAAU,EAAK;EACzC,OACE;IAAM,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAA,UAChC,KAAC,SAAS;MAAC,KAAK,EAAED,MAAM,CAACE,MAAO;MAAG,OAAO,EAAE;QAAA,OAAMH,UAAU,CAACI,QAAQ,CAAC,SAAS,CAAC;MAAA,CAAC;MAAA,UACjF,KAAC,IAAI;QAAC,KAAK,EAAEH,MAAM,CAACI,IAAK;QAAA,UAAE;MAAS;IAAQ;EAChC,EAGH;AAGT,CAAC;AAED,IAAMC,OAAO,GAAG,SAAVA,OAAO,GAAS;EACrB,gBAAwCZ,QAAQ,CAAC,CAAC,CAAC;IAAA;IAA5Ca,YAAY;IAAEC,eAAe;;EAEnC,OAIE,MAAC,IAAI;IAAC,KAAK,EAAEP,MAAM,CAACC,SAAU;IAAA,WAG5B,KAAC,SAAS;MACR,OAAO,EAAE,mBAAM;QACbM,eAAe,CAAC,UAAAC,OAAO;UAAA,OAAIA,OAAO,GAAG,CAAC;QAAA,EAAC;QACvCZ,WAAW,GAACA,WAAW,GAAG,CAAC;MAC7B,CAAE;MACF,KAAK,EAAE;QAAA,IAAEa,OAAO,QAAPA,OAAO;QAAA,OAAM,CACpB;UACEC,eAAe,EAAED,OAAO,GAAG,kBAAkB,GAAG;QAClD,CAAC,EACDT,MAAM,CAACW,aAAa,CACrB;MAAA,CAAC;MAAA,UACD;QAAA,IAAEF,OAAO,SAAPA,OAAO;QAAA,OACR,KAAC,IAAI;UAAC,KAAK,EAAET,MAAM,CAACI,IAAK;UAAA,UAAEK,OAAO,GAAG,cAAc,GAAG;QAAU,EAAQ;MAAA;IACzE,EACS,EACZ,KAAC,IAAI;MAAC,KAAK,EAAET,MAAM,CAACY,MAAO;MAAA,UACzB,MAAC,IAAI;QAAA,+BAAkBhB,WAAW;MAAA;IAAQ,EACrC;EAAA,EACF;AAEX,CAAC;AAQD,IAAMI,MAAM,GAAGa,UAAU,CAACC,MAAM,CAAC;EAC/Bb,SAAS,EAAE;IACTc,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE;EAClB,CAAC;EACDZ,IAAI,EAAE;IACJa,QAAQ,EAAE;EACZ,CAAC;EACDN,aAAa,EAAE;IACbO,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE;EACX,CAAC;EACDP,MAAM,EAAE;IACNO,OAAO,EAAE,EAAE;IACXC,MAAM,EAAE,EAAE;IACVC,WAAW,EAAER,UAAU,CAACS,aAAa;IACrCC,WAAW,EAAE,SAAS;IACtBb,eAAe,EAAE;EACnB,CAAC;EACDR,MAAM,EAAE;IACNsB,UAAU,EAAE,QAAQ;IACpBR,cAAc,EAAE,QAAQ;IACxBS,aAAa,EAAE,KAAK;IACpBC,eAAe,EAAE,EAAE;IACnBC,iBAAiB,EAAE,EAAE;IACrBP,MAAM,EAAE,CAAC;IACTF,YAAY,EAAE,CAAC;IACfU,SAAS,EAAE,CAAC;IACZlB,eAAe,EAAE;EACnB;AACF,CAAC,CAAC;AAEF,eAAe,SAASmB,OAAO,GAAG;EAChC,OACF,KAAC,mBAAmB;IAAA,UACpB,MAAC,KAAK,CAAC,SAAS;MAAC,gBAAgB,EAAC,KAAK;MAAA,WACrC,KAAC,KAAK,CAAC,MAAM;QAAC,IAAI,EAAC,KAAK;QAAC,QAAQ,EAAE/B;MAAiB,EAAE,EACtD,KAAC,KAAK,CAAC,MAAM;QAAC,IAAI,EAAC,SAAS;QAAC,SAAS,EAAEO;MAAQ,EAAG;IAAA;EACnC,EACI;AAEtB"},"metadata":{},"sourceType":"module"}