{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar timepressed = 0;\nvar Stack = createNativeStackNavigator();\nvar navitgatorScreen = function navitgatorScreen(navigation) {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: '10',\n      padding: '20'\n    },\n    children: _jsx(Text, {\n      children: \"Testing\"\n    })\n  });\n};\n\nexport { navitgatorScreen };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#33BEFF',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    paddingVertical: 30,\n    paddingHorizontal: 50,\n    margin: 4,\n    borderRadius: 4,\n    elevation: 3,\n    backgroundColor: 'red'\n  },\n  text: {\n    fontSize: 22,\n    lineHeight: 21,\n    fontWeight: 'bold',\n    letterSpacing: 1.5,\n    color: 'white'\n  },\n  wrapperCustom: {\n    borderRadius: 8,\n    padding: 6\n  },\n  logBox: {\n    padding: 20,\n    margin: 10,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  }\n});","map":{"version":3,"names":["React","createNativeStackNavigator","timepressed","Stack","navitgatorScreen","navigation","flex","flexDirection","alignItems","justifyContent","margin","padding","styles","StyleSheet","create","container","backgroundColor","button","paddingVertical","paddingHorizontal","borderRadius","elevation","text","fontSize","lineHeight","fontWeight","letterSpacing","color","wrapperCustom","logBox","borderWidth","hairlineWidth","borderColor"],"sources":["C:/Users/Lance/OneDrive/Documents/GitHub/frc-prodromoi/Screens/Matches/Buttons.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\r\nimport {NavigationContainer} from '@react-navigation/native';\r\nimport {createNativeStackNavigator} from '@react-navigation/native-stack';\r\nimport { ScreenStack } from 'react-native-screens';\r\n\r\nvar timepressed = 0;\r\nconst Stack = createNativeStackNavigator();\r\n\r\nconst navitgatorScreen = (navigation) => {\r\nreturn(\r\n\r\n  \r\n  <View style={{ flex: 1, flexDirection: 'column', alignItems: 'center', justifyContent: 'center', margin: '10', padding: '20'}}>\r\n   <Text>Testing</Text>\r\n</View>\r\n\r\n);\r\n}\r\n/*\r\nconst Button1 = () => {\r\n const [timesPressed, setTimesPressed] = useState(0);//Don't delete.\r\n\r\n  return (\r\n   \r\n\r\n    <View style={styles.container}>\r\n\r\n    \r\n      <Pressable\r\n        onPress={() => {\r\n          setTimesPressed(current => current + 1);//Don't delete. The counting system stops working if this line isn't here\r\n          timepressed=timepressed + 1;\r\n        }}\r\n        style={({pressed}) => [\r\n          {\r\n            backgroundColor: pressed ? 'rgb(10, 100, 25)' : 'white',\r\n          },\r\n          styles.wrapperCustom,\r\n        ]}>\r\n        {({pressed}) => (\r\n          <Text style={styles.text}>{pressed ? 'was pressed!' : 'Press Me'}</Text>\r\n        )}\r\n      </Pressable>\r\n      <View style={styles.logBox}>\r\n        <Text>This is pressed {timepressed}</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\n*/\r\n\r\n//export default navitgatorScreen;\r\nexport {navitgatorScreen};\r\n\r\n\r\n\r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#33BEFF',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    button: {\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      flexDirection: 'row',\r\n      paddingVertical: 30,\r\n      paddingHorizontal: 50,\r\n      margin: 4,\r\n      borderRadius: 4,\r\n      elevation: 3,\r\n      backgroundColor: 'red',\r\n    },\r\n    text: {\r\n      fontSize: 22,\r\n      lineHeight: 21,\r\n      fontWeight: 'bold',\r\n      letterSpacing: 1.5,\r\n      color: 'white',\r\n    },\r\n    wrapperCustom: {\r\n      borderRadius: 8,\r\n      padding: 6,\r\n    },\r\n    logBox: {\r\n      padding: 20,\r\n      margin: 10,\r\n      borderWidth: StyleSheet.hairlineWidth,\r\n      borderColor: '#f0f0f0',\r\n      backgroundColor: '#f9f9f9',\r\n    },\r\n  \r\n  })\r\n  \r\n  \r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAkB,OAAO;AAAC;AAAA;AAAA;AAGtC,SAAQC,0BAA0B,QAAO,gCAAgC;AAAC;AAG1E,IAAIC,WAAW,GAAG,CAAC;AACnB,IAAMC,KAAK,GAAGF,0BAA0B,EAAE;AAE1C,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,UAAU,EAAK;EACzC,OAGE,KAAC,IAAI;IAAC,KAAK,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,aAAa,EAAE,QAAQ;MAAEC,UAAU,EAAE,QAAQ;MAAEC,cAAc,EAAE,QAAQ;MAAEC,MAAM,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAI,CAAE;IAAA,UAC7H,KAAC,IAAI;MAAA;IAAA;EAAe,EAChB;AAGP,CAAC;;AAoCD,SAAQP,gBAAgB;AAItB,IAAMQ,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTT,IAAI,EAAE,CAAC;IACPU,eAAe,EAAE,SAAS;IAC1BR,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDQ,MAAM,EAAE;IACNT,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBF,aAAa,EAAE,KAAK;IACpBW,eAAe,EAAE,EAAE;IACnBC,iBAAiB,EAAE,EAAE;IACrBT,MAAM,EAAE,CAAC;IACTU,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE,CAAC;IACZL,eAAe,EAAE;EACnB,CAAC;EACDM,IAAI,EAAE;IACJC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,MAAM;IAClBC,aAAa,EAAE,GAAG;IAClBC,KAAK,EAAE;EACT,CAAC;EACDC,aAAa,EAAE;IACbR,YAAY,EAAE,CAAC;IACfT,OAAO,EAAE;EACX,CAAC;EACDkB,MAAM,EAAE;IACNlB,OAAO,EAAE,EAAE;IACXD,MAAM,EAAE,EAAE;IACVoB,WAAW,EAAEjB,UAAU,CAACkB,aAAa;IACrCC,WAAW,EAAE,SAAS;IACtBhB,eAAe,EAAE;EACnB;AAEF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}